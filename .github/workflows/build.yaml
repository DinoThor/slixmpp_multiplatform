name: Build and publish

on:
  push:
    tags:
      - 'v*'

jobs:
  retrieve-package:
    name: Clone Slixmpp and rename
    runs-on: ubuntu-latest
    steps:
      - name: Clone Slixmpp
        run: |
          git clone https://codeberg.org/poezio/slixmpp.git

      - name: Patch project name in pyproject.toml and Cargo.toml
        working-directory: slixmpp
        run: |
          sed -i.bak 's/^name = "slixmpp"/name = "slixmpp_multiplatform"/' pyproject.toml
          sed -i.bak 's/name = "slixmpp"/name = "slixmpp_multiplatform"/' Cargo.toml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: slixmpp-multiplatform
          path: slixmpp

  build:
    name: Build for Win + macOS
    needs: retrieve-package
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download slixmpp
        uses: actions/download-artifact@v4
        with:
          name: slixmpp-multiplatform
          path: slixmpp-multiplatform

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Build macOS ARM64 wheel
        if: matrix.os == 'macos-latest'
        working-directory: slixmpp-multiplatform
        run: |
          rustup target add aarch64-apple-darwin
          maturin build --release --target aarch64-apple-darwin -i python${{ matrix.python-version }} --out target/wheels_arm64

      - name: Build macOS x86_64 wheel
        if: matrix.os == 'macos-latest'
        working-directory: slixmpp-multiplatform
        run: |
          rustup target add x86_64-apple-darwin
          maturin build --release --target x86_64-apple-darwin -i python${{ matrix.python-version }} --out target/wheels_x86_64

      - name: Build Windows wheel
        if: matrix.os == 'windows-latest'
        working-directory: slixmpp-multiplatform
        run: |
          maturin build --release -i python${{ matrix.python-version }} --out target/wheels_x86_64

      - name: Upload macOS ARM64 wheel
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-arm64-py${{ matrix.python-version }}
          path: slixmpp-multiplatform/target/wheels_arm64/*.whl

      - name: Upload macOS x86_64 wheel
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-x86_64-py${{ matrix.python-version }}
          path: slixmpp-multiplatform/target/wheels_x86_64/*.whl

      - name: Upload Windows wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: slixmpp-multiplatform/target/wheels_x86_64/*.whl

  build-linux:
    name: Build for Linux
    needs: retrieve-package
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    runs-on: ubuntu-latest
    steps:
      - name: Download slixmpp
        uses: actions/download-artifact@v4
        with:
          name: slixmpp-multiplatform
          path: slixmpp-multiplatform

      - name: Build wheels using maturin container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/io \
            -w /io/slixmpp-multiplatform \
            ghcr.io/pyo3/maturin \
            build --release --manylinux 2014 -i python${{ matrix.python-version }} \
            --out /io/slixmpp-multiplatform/target/wheels_x86_64

      - name: List wheels
        run: ls -lh slixmpp-multiplatform/target/wheels_x86_64/

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-py${{ matrix.python-version }}
          path: slixmpp-multiplatform/target/wheels_x86_64/*.whl

  publish:
    name: Publish all wheels
    needs: [build, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: List wheels
        run: ls -R dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install maturin
        run: pip install maturin

      - name: Publish to PyPI
        run: |
          find dist -name "*.whl" -exec maturin upload {} --username __token__ --password ${{ secrets.PYPI_TOKEN }} \;
